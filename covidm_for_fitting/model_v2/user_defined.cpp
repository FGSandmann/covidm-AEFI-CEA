// Generated by covidm Mon Jun 21 16:53:01 2021

#include "user_defined.h"
#include "convenience.h"

void CppChanges(const vector<double>& x, Parameters& P)
{
    (void)x; (void)P;
    
}

double CppLogLikelihood(const vector<double>& x, Reporter& dyn)
{
    (void)dyn;
    double ll = 0.0;
    
    return ll;
}

bool CppObserver(Parameters& P, Randomizer& R, Reporter& dyn, double t, vector<double>& x)
{
    (void) P; (void) R; (void) dyn; (void) t;
    
    const int obsStage = 0;
    const int obsR0 = 1;
    const int obsRt = 2;
    const vector<double> threshold_lockdown1 = { 107186.539485788 };
    const vector<double> threshold_lockdown2 = { 107186.539485788 };
    const vector<double> threshold_lockdown3 = { 107186.539485788 };
    const vector<double> threshold_release   = { 0.893221162381569 };
    const vector<double> t_noFurtherLockdowns  = { 1e+06 };
    const vector<double> t_1  = { 203 };
    const vector<double> t_2  = { 245 };
    const vector<double> t_3  = { 354 };
    const vector<double> t_4  = { 368 };
    const vector<double> t_5  = { 568 };
    const vector<double> t_6  = { 610 };
    const vector<double> t_7  = { 719 };
    const vector<double> t_8  = { 733 };
    const vector<double> t_9  = { 933 };
    const vector<double> t_10 = { 975 };
    const vector<double> t_11 = { 1084 };
    const vector<double> t_12 = { 1098 };
    const vector<double> t_13 = { 1298 };
    const vector<double> t_14 = { 1340 };
    const vector<double> t_15 = { 1449 };
    const vector<double> t_16 = { 1463 };
    const vector<double> t_17 = { 1664 };
    const vector<double> t_18 = { 1706 };
    const vector<double> t_19 = { 1815 };
    const vector<double> t_20 = { 1829 };
    const vector<double> t_21 = { 2029 };
    const vector<double> t_22 = { 2071 };
    const vector<double> t_23 = { 2180 };
    const vector<double> t_24 = { 2194 };
    const vector<double> t_25 = { 2394 };
    const vector<double> t_26 = { 2436 };
    const vector<double> t_27 = { 2545 };
    const vector<double> t_28 = { 2559 };
    const vector<double> t_29 = { 2759 };
    const vector<double> t_30 = { 2801 };
    const vector<double> t_31 = { 2910 };
    const vector<double> t_32 = { 2924 };
    const vector<double> t_33 = { 3125 };
    const vector<double> t_34 = { 3167 };
    const vector<double> t_35 = { 3276 };
    const vector<double> t_36 = { 3290 };
    const vector<double> t_37 = { 3490 };
    const vector<double> t_38 = { 3532 };
    const vector<double> t_39 = { 3641 };
    const vector<double> t_40 = { 3655 };

    auto set_contact = [&](unsigned int p, vector<double> con, int stage) {
        P.pop[p].contact = con;
        P.pop[p].needs_recalc = true;
        P.pop[p].Recalculate();
        dyn.Obs(t, p, obsStage, 0) = stage;
    };

    for (unsigned int p = 0; p < P.pop.size(); ++p)
    {
    
    double sum_pop = std::accumulate(P.pop[p].size.begin(), P.pop[p].size.end(), 0.0);
    double curr_incidence  = (dyn("cases", t, { p }, {})     / sum_pop *100000);

        if (
        ((t >= t_1[p % t_1.size()]   && t < t_2[p % t_2.size()])   && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_3[p % t_3.size()]   && t < t_4[p % t_4.size()])   && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_5[p % t_5.size()]   && t < t_6[p % t_6.size()])   && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_7[p % t_7.size()]   && t < t_8[p % t_8.size()])   && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_9[p % t_9.size()]   && t < t_10[p % t_10.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_11[p % t_11.size()] && t < t_12[p % t_12.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_13[p % t_13.size()] && t < t_14[p % t_14.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_15[p % t_15.size()] && t < t_16[p % t_16.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_17[p % t_17.size()] && t < t_18[p % t_18.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_19[p % t_19.size()] && t < t_20[p % t_20.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_21[p % t_21.size()] && t < t_22[p % t_22.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_23[p % t_23.size()] && t < t_24[p % t_24.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_25[p % t_25.size()] && t < t_26[p % t_26.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_27[p % t_27.size()] && t < t_28[p % t_28.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_29[p % t_29.size()] && t < t_30[p % t_30.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_31[p % t_31.size()] && t < t_32[p % t_32.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_33[p % t_33.size()] && t < t_34[p % t_34.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_35[p % t_35.size()] && t < t_36[p % t_36.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_37[p % t_37.size()] && t < t_38[p % t_38.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()])) ||
        ((t >= t_39[p % t_39.size()] && t < t_40[p % t_40.size()]) && (curr_incidence < threshold_lockdown3[p % threshold_lockdown3.size()]))
        )
            set_contact(p, { 1, 0.67, 0, 0.67 }, 5);
            
            
       else if (t > t_noFurtherLockdowns[p % t_noFurtherLockdowns.size()])
       {
       set_contact(p, { 1, 0.67, 0.67, 0.67 }, 4);
       }
    
        else if (t > 0)
        {
            int prev_stage = dyn.Obs(t - 1, p, obsStage, 0);
            
        
            double sum_pop = std::accumulate(P.pop[p].size.begin(), P.pop[p].size.end(), 0.0);
            double curr_incidence  = (dyn("cases", t, { p }, {})  / sum_pop *100000);
            
            if (prev_stage==0 && curr_incidence >= threshold_lockdown1[p % threshold_lockdown1.size()])
                set_contact(p, { 0.9, 0.1, 0.1, 0.1 }, 1);
            else if (prev_stage!=0 && prev_stage!=1 && curr_incidence < threshold_release[p % threshold_release.size()])
                set_contact(p, { 1, 0.67, 0.67, 0.67 }, 4);
            else if (prev_stage!=0 && prev_stage!=1 && (curr_incidence >= threshold_lockdown3[p % threshold_lockdown3.size()]))
                set_contact(p, { 1, 0.1, 0.1, 0.1 }, 3);
            else if (prev_stage!=0 && prev_stage!=1 && curr_incidence >= threshold_lockdown2[p % threshold_lockdown2.size()] )
                set_contact(p, { 1, 0.1, 0.1, 0.1 }, 2);
            else if (prev_stage == 5)
                set_contact(p, { 1, 0.67, 0.67, 0.67 }, 4);
            else
                dyn.Obs(t, p, obsStage, 0) = prev_stage;
        }
        
        dyn.Obs(t, p, obsR0, 0) = estimate_R0(P, t, p, 20);
        dyn.Obs(t, p, obsRt, 0) = estimate_Rt(P, dyn, t, p, 20);
    }
    return true;
}
